= AwesomeNestedSet

Awesome Nested Set is a complete replacement for acts_as_nested_set and betternestedset, but awesomer.

== Installation

If you are on edge rails:

  script/plugin install git://github.com/collectiveidea/awesome_nested_set.git
  
If you are not on edge rails:

  git clone git://github.com/collectiveidea/awesome_nested_set.git vendor/plugins/awesome_nested_set

== What makes this so awesome?

This is a new implementation of nested set based off of better nested set.  It fixes some bugs, removes tons of duplication, adds a few useful methods, adds STI support and adds 2 very helpful view helpers for select boxes.

== ActiveRecord

Create a migration like:

  class CreateCategories < ActiveRecord::Migration
    def self.up
      create_table :categories do |t|
        t.string :name
        t.integer :parent_id
        t.integer :lft
        t.integer :rgt
      end
    end

    def self.down
      drop_table :categories
    end
  end

Then create a model like:

  class Category < ActiveRecord::Base
    acts_as_nested_set
  end

Methods names are aligned on Tree's ones as much as possible, to make replacment from one
by another easier, except for the creation:

in acts_as_tree:

  item.children.create(:name => "child1")

in acts_as_nested_set:

  # adds a new item at the "end" of the tree, i.e. with child.left = max(tree.right)</tt>1
  child = MyClass.new(:name => "child1")
  child.save
  # now move the item to its right place
  child.move_to_child_of my_item

You can use:
* move_to_child_of
* move_to_right_of
* move_to_left_of
and pass them an id or an object.

== Class Methods

* <tt>root</tt> - Returns the first root
* <tt>roots</tt> - root items, in case of multiple roots (the ones that have a nil parent)
* <tt>valid?</tt> - 
* <tt>left_and_rights_valid?</tt> - 
* <tt>def no_duplicates_for_column?</tt> - pass in quoted_left_column_name or quoted_right_column_name
* <tt>all_roots_valid?</tt> - Wrapper for each_root_valid? that can deal with scope.
* <tt>each_root_valid?</tt> - 
* <tt>rebuild!</tt> - Rebuilds the left & rights if unset or invalid.  Also very useful for converting from acts_as_tree.

== Instance Methods

* <tt>parent_id</tt> -
* <tt>left</tt> - 
* <tt>right</tt> -
* <tt>root?</tt> -  Returns true if this is a root node.
* <tt>child?</tt> -  Returns true is this is a child node
* <tt><=>(x)</tt> -  order by left column
* <tt>add_child( child )</tt> -  Deprecated, will be removed in next versions
* <tt>root</tt> -  Returns root
* <tt>parent</tt> -  Returns the parent
* <tt>self_and_ancestors(multiplicity = :all, *args)</tt> -  Returns the array of all parents and self
* <tt>ancestors(*args)</tt> -  Returns an array of all parents
* <tt>self_and_siblings(multiplicity = :all, *args)</tt>  -  Returns the array of all children of the parent, including self
* <tt>siblings(*args)</tt> -  Returns the array of all children of the parent, except self
* <tt>level</tt>  Returns the level of this object in the tree - root level is 0
* <tt>children_count</tt> -  Returns the number of nested children of this object.
* <tt>has_children?</tt>
* <tt>self_and_descendants(multiplicity = :all, *args)</tt> -  Returns a set of itself and all of its nested children
* <tt>descendants(*args)</tt> -  Returns a set of all of its children and nested children
* <tt>children(multiplicity = :all, *args)</tt> -  Returns a set of only this entry's immediate children
* <tt>is_descendant_of?(other)</tt>
* <tt>is_or_is_descendant_of?(other)</tt>
* <tt>is_ancestor_of?(other)</tt>
* <tt>is_or_is_ancestor_of?(other)</tt>
* <tt>is_same_scope?(other)</tt>
* <tt>left_sibling</tt> -  Find the first sibling to the right
* <tt>right_sibling</tt> -  Find the first sibling to the right
* <tt>move_left</tt> -  Shorthand method for finding the left sibling and moving to the left of it.
* <tt>move_right</tt> -  Shorthand method for finding the right sibling and moving to the right of it.
* <tt>move_to_left_of(node)</tt> -  Move the node to the left of another node (you can pass id only)
* <tt>move_to_right_of(node)</tt> -  Move the node to the left of another node (you can pass id only)
* <tt>move_to_child_of(node)</tt> -  Move the node to the child of another node (you can pass id only)
* <tt>move_possible?(target)</tt>
* <tt>to_text</tt>

== View Helpers

* <tt>nested_set_options_for_select</tt> - returns an array of objects suitable for select helpers
* <tt>nested_set_options_for_select_without_impossible_moves</tt> - similar to nested_set_options_for_select, but contains only items that are possible to move to

== References

You can learn more about nested sets at:

  http://www.dbmsmag.com/9603d06.html
  http://threebit.net/tutorials/nestedset/tutorial1.html
  http://api.rubyonrails.com/classes/ActiveRecord/Acts/NestedSet/ClassMethods.html
  http://opensource.symetrie.com/trac/better_nested_set/


Copyright (c) 2008 Collective Idea, released under the MIT license
